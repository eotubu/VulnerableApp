package org.sasanlabs.vulnerability.types;

import org.sasanlabs.internal.utility.annotations.AttackVector;

/**
 * This will be part of {@link AttackVector} annotation. This will be returned to Scanners for
 * better comparison of there results. For more information on How this can be helpful for scanners
 * please visit <br>
 * 1. <a href="https://github.com/SasanLabs/VulnerableApp/issues/130">Scanner Reporting system</a>
 * <br>
 * 2. <a href="https://github.com/SasanLabs/VulnerableApp/issues/147">Vulnerability SubType
 * Issue</a>
 *
 * @author KSASAN preetkaran20@gmail.com
 */
public enum VulnerabilitySubType {

    // SQL Injection
    BLIND_SQL_INJECTION(VulnerabilityType.SQL_INJECTION),
    ERROR_BASED_SQL_INJECTION(VulnerabilityType.SQL_INJECTION),
    UNION_BASED_SQL_INJECTION(VulnerabilityType.SQL_INJECTION),

    // XSS
    REFLECTED_XSS(VulnerabilityType.XSS),
    PERSISTENT_XSS(VulnerabilityType.XSS),
    DOM_BASED_XSS(VulnerabilityType.XSS),

    // JWT Related
    CLIENT_SIDE_VULNERABLE_JWT(VulnerabilityType.VULNERABLE_JWT_IMPLMENTATION),
    SERVER_SIDE_VULNERABLE_JWT(VulnerabilityType.VULNERABLE_JWT_IMPLMENTATION),
    INSECURE_CONFIGURATION_JWT(VulnerabilityType.VULNERABLE_JWT_IMPLMENTATION),

    PATH_TRAVERSAL(VulnerabilityType.PATH_TRAVERSAL),
    COMMAND_INJECTION(VulnerabilityType.COMMAND_INJECTION),

    UNRESTRICTED_FILE_UPLOAD(VulnerabilityType.UNRESTRICTED_FILE_UPLOAD),

    OPEN_REDIRECT_3XX_STATUS_CODE(VulnerabilityType.OPEN_REDIRECT),

    // Combined Attacking Vulnerability
    NULL_BYTE(VulnerabilityType.NULL_BYTE),

    // XXE Vulnerability
    XXE(VulnerabilityType.XXE);

    private VulnerabilityType vulnerabilityType;

    private VulnerabilitySubType(VulnerabilityType vulnerabilityType) {
        this.vulnerabilityType = vulnerabilityType;
    }

    public VulnerabilityType getVulnerabilityType() {
        return vulnerabilityType;
    }
}
